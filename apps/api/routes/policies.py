# apps/api/routes/policies.py
from fastapi import APIRouter, HTTPException
from fastapi.responses import Response
from pydantic import BaseModel, Field
from typing import List
from playwright.sync_api import sync_playwright  # sync API to avoid async syntax issues
import re

router = APIRouter(prefix="/v1/policies", tags=["policies"])


# -----------------------
# Data models & stubs
# -----------------------
class Template(BaseModel):
    key: str
    title: str


# Simple in-memory templates (DB comes later)
TEMPLATES: List[Template] = [
    Template(key="access_control_policy", title="Access Control Policy"),
    Template(key="acceptable_use_policy", title="Acceptable Use Policy"),
    Template(key="incident_response_policy", title="Incident Response Policy"),
]


@router.get("/templates", response_model=List[Template])
def list_templates():
    return TEMPLATES


class DraftRequest(BaseModel):
    template_key: str = Field(..., description="Which template to start from")
    org_name: str = Field(default="Acme Corp")
    password_min_length: int = Field(14, ge=8, le=128)
    mfa_required_roles: List[str] = Field(default_factory=lambda: ["Admin"])
    log_retention_days: int = Field(90, ge=7, le=3650)


class DraftResponse(BaseModel):
    title: str
    html: str


# -----------------------
# Render helpers
# -----------------------
def render_html(req: DraftRequest) -> str:
    title_map = {t.key: t.title for t in TEMPLATES}
    title = title_map.get(req.template_key, req.template_key.replace("_", " ").title())
    return f"""
<article style="font-family: system-ui; line-height:1.5; max-width: 800px; margin: 0 auto;">
  <h1 style="margin:0 0 12px 0;">{title}</h1>
  <p><strong>Organization:</strong> {req.org_name}</p>

  <h2>Purpose</h2>
  <p>Define requirements to safeguard information assets through access control and monitoring.</p>

  <h2>Scope</h2>
  <p>Applies to employees, contractors, and systems owned or operated by {req.org_name}.</p>

  <h2>Policy</h2>
  <ul>
    <li>Minimum password length: {req.password_min_length} characters.</li>
    <li>MFA required for roles: {", ".join(req.mfa_required_roles) or "None"}.</li>
    <li>Log retention: {req.log_retention_days} days.</li>
  </ul>

  <h2>Standards</h2>
  <p>Passwords must be stored using industry-standard hashing. Accounts are provisioned with least privilege.</p>

  <h2>Procedures</h2>
  <ol>
    <li>Requests for elevated access require manager approval.</li>
    <li>Inactive accounts disabled after 30 days of inactivity.</li>
  </ol>

  <h2>Exceptions</h2>
  <p>Documented, time-bound exceptions require risk acceptance.</p>

  <h2>Enforcement</h2>
  <p>Violations may result in disciplinary action up to termination.</p>

  <hr/>
  <small>Generated by PolicyForge (MVP stub). Replace with AI-generated content next.</small>
</article>
"""


def _slugify(name: str) -> str:
    return re.sub(r"[^a-z0-9]+", "-", name.lower()).strip("-") or "policy"


def render_pdf_sync(html: str) -> bytes:
    with sync_playwright() as p:
        browser = p.chromium.launch()
        page = browser.new_page()
        page.set_content(html, wait_until="load")
        pdf_bytes = page.pdf(format="A4", print_background=True)
        browser.close()
        return pdf_bytes


# -----------------------
# Routes
# -----------------------
@router.post("/draft", response_model=DraftResponse)
def draft_policy(req: DraftRequest) -> DraftResponse:
    if req.template_key not in {t.key for t in TEMPLATES}:
        raise HTTPException(status_code=400, detail="Unknown template_key")
    html = render_html(req)
    title = next((t.title for t in TEMPLATES if t.key == req.template_key), req.template_key)
    return DraftResponse(title=title, html=html)


@router.post("/export/html")
def export_html(req: DraftRequest):
    title_map = {t.key: t.title for t in TEMPLATES}
    if req.template_key not in title_map:
        raise HTTPException(status_code=400, detail="Unknown template_key")

    html = render_html(req)
    title = title_map[req.template_key]
    filename = f"{_slugify(title)}.html"

    return Response(
        content=html,
        media_type="text/html; charset=utf-8",
        headers={"Content-Disposition": f'attachment; filename="{filename}"'}
    )


@router.post("/export/pdf")
def export_pdf(req: DraftRequest):
    title_map = {t.key: t.title for t in TEMPLATES}
    if req.template_key not in title_map:
        raise HTTPException(status_code=400, detail="Unknown template_key")

    html = render_html(req)
    pdf = render_pdf_sync(html)
    title = title_map[req.template_key]
    filename = f"{_slugify(title)}.pdf"

    return Response(
        content=pdf,
        media_type="application/pdf",
        headers={"Content-Disposition": f'attachment; filename="{filename}"'}
    )
